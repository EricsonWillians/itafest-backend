rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Option A: Using custom claims for admin check
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    function isValidBusiness() {
      let requiredFields = ['name', 'description', 'categories', 'address', 'phone', 'email', 'ownerId'];
      let hasRequired = requiredFields.every(field => request.resource.data[field] != null);
      
      return hasRequired && 
        request.resource.data.name.size() >= 3 &&
        request.resource.data.description.size() <= 1000 &&
        request.resource.data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
        request.resource.data.phone.matches('^\\+?[0-9]{10,15}$');
    }
    
    function isNotRateLimited() {
      // Implementation of rate limiting logic
      return true; // Simplified for this example
    }

    // Business collection rules
    match /businesses/{businessId} {
      allow read: if true; // Public read access
      
      allow create: if isAuthenticated() && 
                      isValidBusiness() && 
                      request.resource.data.ownerId == request.auth.uid &&
                      isNotRateLimited();
      
      allow update: if (isBusinessOwner(businessId) || isAdmin()) && 
                      isValidBusiness();
      
      allow delete: if isBusinessOwner(businessId) || isAdmin();

      // Business events subcollection
      match /events/{eventId} {
        allow read: if true;
        allow create: if isBusinessOwner(businessId) && 
                        isValidEvent() &&
                        isNotRateLimited();
        allow update: if isBusinessOwner(businessId) && isValidEvent();
        allow delete: if isBusinessOwner(businessId) || isAdmin();
      }

      // Business reviews subcollection
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
                        request.resource.data.userId == request.auth.uid &&
                        request.resource.data.rating >= 1 &&
                        request.resource.data.rating <= 5 &&
                        request.resource.data.content.size() <= 500;
        allow update: if request.auth.uid == resource.data.userId &&
                        request.resource.data.rating >= 1 &&
                        request.resource.data.rating <= 5 &&
                        request.resource.data.content.size() <= 500;
        allow delete: if request.auth.uid == resource.data.userId || isAdmin();
      }
    }

    // User collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      request.resource.data.role == 'user';
      allow update: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']));
      allow delete: if isAdmin();
      
      // User preferences subcollection
      match /preferences/{prefId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Advertisements collection rules
    match /advertisements/{adId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                      isBusinessOwner(request.resource.data.businessId) &&
                      isNotRateLimited();
      allow update: if isBusinessOwner(resource.data.businessId) || isAdmin();
      allow delete: if isBusinessOwner(resource.data.businessId) || isAdmin();
    }

    // Categories collection (read-only for users, managed by admin)
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Analytics collection
    match /analytics/{docId} {
      allow read: if isBusinessOwner(resource.data.businessId) || isAdmin();
      allow write: if isAdmin();
    }
    
    // System settings (admin only)
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
